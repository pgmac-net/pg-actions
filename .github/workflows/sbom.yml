name: SBOM Generator

on:
  push:
    branches: ["master", "main"]

  workflow_dispatch:
  workflow_call:

jobs:
  sbom-build-attest:
    runs-on: self-hosted
    permissions:
      id-token: write
      attestations: write
      actions: read
      contents: write
      security-events: write

    steps:
      - uses: actions/checkout@v3

      - name: Build the CycloneDX SBoM for this directory
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: cyclonedx-json
          output-file: sbom.json
          artifact-name: sbom.json
          upload-artifact: true
          dependency-snapshot: true

      - name: Upload SBoM to Dependency Track
        run: |
          curl -kX "POST" "${{ secrets.DT_PROTOCOL || 'https' }}://${{ secrets.DT_HOST }}/api/v1/bom" \
          -H 'Content-Type: multipart/form-data' \
          -H "X-Api-Key: ${{ secrets.DT_APIKEY }}" \
          -F "autoCreate=true" \
          -F "projectName=${{ github.repository }}" \
          -F "projectVersion=${{ github.sha }}" \
          -F "bom=@sbom.json"

      - name: Build the SHA256 digest
        id: sha256
        run: |
          echo "sha256=sha256:$(sha256sum sbom.json | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT

      - name: Attest the SBoM
        if: github.event.repository.visibility == 'public'
        uses: actions/attest-build-provenance@v1
        with:
          #subject-path: sbom.json
          subject-name: sbom.json
          subject-digest: ${{ steps.sha256.outputs.sha256 }}
          show-summary: true
          push-to-registry: false

      - name: Build the SPDX SBoM for this directory for later grype scans
        uses: anchore/sbom-action@v0
        id: spdx-scan
        with:
          path: ./
          format: spdx-json
          output-file: sbom-spdx.json
          artifact-name: sbom-spdx.json
          upload-artifact: true
          dependency-snapshot: true

      - name: Build the SHA256 digest
        id: spdx-sha256
        run: |
          echo "sha256=sha256:$(sha256sum sbom-spdx.json | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT

      - name: Attest the SBoM
        if: github.event.repository.visibility == 'public'
        uses: actions/attest-build-provenance@v1
        with:
          #subject-path: sbom.json
          subject-name: sbom-spdx.json
          subject-digest: ${{ steps.spdx-sha256.outputs.sha256 }}
          show-summary: true
          push-to-registry: false

      - name: Scan the SPDX SBoM for vulnerabilities # The grype SBoM scan only scans SPDX format SBoMs
        uses: anchore/scan-action@v3
        id: scan
        with:
          sbom: sbom-spdx.json
          fail-build: false # Reporting only mode for now - change to true to fail the build
          #severity-cutoff: "medium" # Only fail the build if a vulnerability of this severity or higher is found
          only-fixed: true # Only report vulnerabilities that have a fix available
          output-format: sarif

      - name: Upload SPDX SBoM scan SARIF report
        if: github.event.repository.visibility == 'public'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  sbom-scan:
    runs-on: self-hosted
    needs: [sbom-build-attest]
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4.1.8
        with:
          # Name of the artifact to download. If unspecified, all artifacts for the run are downloaded.
          name: sbom-spdx.json
          merge-multiple: false

      - name: Verify the artefact attestation
        if: github.event.repository.visibility == 'public'
        run: gh attestation verify ./sbom-spdx.json -R ${{ github.repository }}
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Scan the SBoM
        uses: anchore/scan-action@v3
        with:
          sbom: sbom-spdx.json
          fail-build: false # Reporting only mode for now - change to true to fail the build
          #severity-cutoff: "medium" # Only fail the build if a vulnerability of this severity or higher is found
          only-fixed: true # Only report vulnerabilities that have a fix available
          output-format: table
          # output-file: results.sarif
